---
import { MoveDown } from '@lucide/astro';
import type { HeroBlock } from '../../types/landing-page';

interface Props {
  block: HeroBlock;
}

const { block } = Astro.props;
---

<section
  class="hero-section relative min-h-screen flex items-center justify-center text-center overflow-hidden bg-gradient-to-br from-slate-950 via-blue-950 to-slate-800 px-4 py-20 lg:py-0"
>
  <div class="absolute inset-0 overflow-hidden">
    <div class="floating-particles">
      {
        Array.from({ length: 12 }).map((_, i) => (
          <div
            class={`particle particle-${i + 1}`}
            style={`--delay: ${i * 0.5}s; --duration: ${8 + (i % 4) * 2}s;`}
          ></div>
        ))
      }
    </div>
  </div>

  <div class="relative z-10 max-w-6xl mx-auto space-y-8">
    <div class="space-y-6">
      <h1
        class="hero-title text-5xl md:text-6xl xl:text-7xl font-extrabold leading-tight text-white drop-shadow-md"
      >
        {block.heading.split(' ').map((word, index) => (
          <span
            class="inline-block word-animate"
            style={`--word-delay: ${index * 0.1}s;`}
          >
            {word}&nbsp;
          </span>
        ))}
      </h1>

      <p
        class="hero-description text-xl md:text-xl lg:text-2xl text-slate-300 max-w-4xl mx-auto leading-relaxed"
      >
        <Fragment set:html={block.description} />
      </p>
    </div>

    {
      block.links && block.links.length > 0 && (
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          {block.links.map((link, index) => (
            <a
              href={link.href}
              target={link.isExternal ? '_blank' : '_self'}
              rel={link.isExternal ? 'noopener noreferrer' : undefined}
              class={`
                group relative inline-flex items-center justify-center px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 ease-out transform hover:scale-102 cta-animate
                max-w-xs mx-auto sm:max-w-none sm:mx-0
                ${
                  link.type === 'PRIMARY'
                    ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-lg shadow-blue-500/25 hover:shadow-xl hover:shadow-blue-500/40'
                    : 'bg-white/10 backdrop-blur-sm text-white border border-white/20 hover:bg-white/20 hover:border-white/30'
                }
              `}
              style={`--cta-delay: ${index * 0.2}s;`}
            >
              <span class="relative z-10">{link.label}</span>
              {link.isExternal && (
                <svg
                  class="relative z-10 w-5 h-5 ml-2 transition-transform duration-300 group-hover:translate-x-1 group-hover:-translate-y-1"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                  />
                </svg>
              )}
            </a>
          ))}
        </div>
      )
    }
  </div>

  <a href="#projects"
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 text-white/60 animate-bounce cursor-pointer"
  >
    <MoveDown class="w-6 h-6" />
    </svg>
  </a>
</section>

<style>
  /* Animaciones de entrada de texto */
  .word-animate {
    opacity: 0;
    transform: translateY(30px);
    animation: wordSlideIn 0.8s ease-out forwards;
    animation-delay: var(--word-delay, 0s);
  }
  .hero-description {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 1s ease-out 0.5s forwards;
  }
  .cta-animate {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    animation: ctaSlideIn 0.8s ease-out forwards;
    animation-delay: calc(0.8s + var(--cta-delay, 0s));
  }

  /* Keyframes */
  @keyframes wordSlideIn {
    to { opacity: 1; transform: translateY(0); }
  }
  @keyframes fadeInUp {
    to { opacity: 1; transform: translateY(0); }
  }
  @keyframes ctaSlideIn {
    to { opacity: 1; transform: translateY(0) scale(1); }
  }
  @keyframes float {
    0%, 100% { transform: translateY(0px) translateX(0px); opacity: 0.1; }
    25% { transform: translateY(-20px) translateX(10px); opacity: 0.3; }
    50% { transform: translateY(-10px) translateX(-10px); opacity: 0.1; }
    75% { transform: translateY(-30px) translateX(5px); opacity: 0.2; }
  }

  /* Partículas flotantes */
  .floating-particles {
    position: absolute;
    width: 100%;
    height: 100%;
  }
  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    animation: float var(--duration, 10s) infinite linear var(--delay, 0s);
  }
  .particle::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: inherit;
    border-radius: 50%;
    animation: pulse 2s infinite ease-in-out;
  }
  @keyframes pulse {
    0%, 100% { transform: scale(1); opacity: 0.1; }
    50% { transform: scale(1.5); opacity: 0.3; }
  }

  /* Posicionamiento de partículas */
  .particle-1 { top: 10%; left: 10%; }
  .particle-2 { top: 20%; left: 80%; }
  .particle-3 { top: 80%; left: 20%; }
  .particle-4 { top: 60%; left: 90%; }
  .particle-5 { top: 30%; left: 70%; }
  .particle-6 { top: 70%; left: 10%; }
  .particle-7 { top: 40%; left: 40%; }
  .particle-8 { top: 85%; left: 60%; }
  .particle-9 { top: 15%; left: 50%; }
  .particle-10 { top: 55%; left: 25%; }
  .particle-11 { top: 25%; left: 15%; }
  .particle-12 { top: 75%; left: 85%; }
</style>