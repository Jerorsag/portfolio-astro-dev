---
import type { ProjectBlock } from '../../types/landing-page';
import { getImageUrl } from '../../services/landing-page';
import { ChevronLeft, ChevronRight, Github, SquareArrowOutUpRight } from '@lucide/astro';

interface Props {
  block: ProjectBlock;
}

const { block } = Astro.props;
---

<section id="projects" class="py-20 md:py-24 bg-slate-900 text-white">
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12 md:mb-16">
      <h2
        class="text-4xl md:text-5xl font-extrabold text-white mb-4 drop-shadow-md"
      >
        {block.heading}
      </h2>
    </div>

    <div class="relative flex items-center justify-center">
      <button
        id="carousel-prev"
        class="absolute -left-4 sm:-left-6 lg:-left-16 top-1/2 -translate-y-1/2 p-3 bg-white/10 rounded-full hover:bg-white/20 transition-colors duration-200 z-20 hidden md:block cursor-pointer"
        aria-label="Previous project"
      >
        <ChevronLeft class="w-6 h-6 text-white" />
      </button>

      <div
        id="projects-carousel"
        class="projects-carousel-container flex flex-nowrap gap-6 sm:gap-8 pb-6 scroll-smooth snap-x snap-mandatory overflow-x-auto"
      >
        {block.proyectos?.data?.map((project) => (
          <div
            class="project-card flex-shrink-0 w-full sm:w-[calc(100%)] md:w-[calc(50%-1.5rem)] lg:w-[calc(33.33%-1.4rem)] bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 ease-in-out p-5 flex flex-col snap-start"
          >
            <h3 class="text-2xl font-bold text-center text-white mb-6">
              {project.attributes.title}
            </h3>

            <div class="rounded-xl overflow-hidden shadow-lg border border-white/5 mb-4">
                <img
                  src={getImageUrl(project.attributes.image.image.data.attributes.url)}
                  alt={project.attributes.image.title}
                  class="w-full h-48 object-cover transition-transform duration-300 ease-in-out group-hover:scale-105"
                  loading="lazy"
                />
            </div>

            <p class="text-slate-300 leading-relaxed text-sm flex-1 mb-4">
              {project.attributes.description}
            </p>

            <div class="flex flex-wrap gap-2 mt-auto mb-6">
              {project.attributes.stackUsed.map((tech) => (
                <img
                  src={getImageUrl(tech.icon.data?.attributes.url)}
                  alt={tech.name}
                  class="w-7 h-7"
                  loading="lazy"
                />
              ))}
            </div>

            <div class="flex gap-4 mt-auto">
              {project.attributes.linksProject.map((link) => (
                <a
                  href={link.href}
                  target="_blank"
                  rel="noopener noreferrer"
                  class={`flex-1 text-center py-3 px-4 rounded-lg font-bold text-white transition-all duration-200 ease-in-out flex items-center justify-center gap-2
                    ${link.type === 'GITHUB'
                      ? 'bg-white/10 border border-white/20 hover:bg-white/20 hover:border-white/30'
                      : 'bg-gradient-to-r from-blue-600 to-cyan-600 shadow-md hover:shadow-lg'
                    }
                  `}
                >
                  {link.type === 'GITHUB' ? (
                    <Github class="w-5 h-5" />
                  ) : (
                    <SquareArrowOutUpRight class="w-5 h-5"/>
                  )}
                  {link.label}
                </a>
              ))}
            </div>
          </div>
        ))}
      </div>

      <button
        id="carousel-next"
        class="absolute -right-4 sm:-right-6 lg:-right-16 top-1/2 -translate-y-1/2 p-3 bg-white/10 rounded-full hover:bg-white/20 transition-colors duration-200 z-20 hidden md:block cursor-pointer"
        aria-label="Next project"
      >
          <ChevronRight class="w-6 h-6 text-white" />
      </button>
    </div>
    <div id="carousel-dots" class="flex justify-center gap-2 mt-8"></div>
  </div>
</section>


<script>
  import Hammer from 'hammerjs';

  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.getElementById('projects-carousel');
    const prevButton = document.getElementById('carousel-prev');
    const nextButton = document.getElementById('carousel-next');
    const dotsContainer = document.getElementById('carousel-dots');
    const cards = carousel.querySelectorAll('.project-card');

    let currentCardIndex = 0;
    let visibleCardsCount = 0;
    let cardCount = 0;
    let scrollTimeout;

    // Mejor cálculo de tarjetas visibles
    const getVisibleCardsCount = () => {
      const screenWidth = window.innerWidth;
      if (screenWidth >= 1024) return 3;
      if (screenWidth >= 768) return 2;
      return 1;
    };

    // Mejor cálculo de ancho de tarjeta usando getBoundingClientRect
    const getCardWidth = () => {
      const card = cards[0];
      if (!card) return 0;
      return card.getBoundingClientRect().width + parseInt(getComputedStyle(carousel).gap || 24);
    };

    // Actualiza la UI y accesibilidad
    const updateUI = () => {
      prevButton.setAttribute('aria-disabled', currentCardIndex === 0 ? 'true' : 'false');
      nextButton.setAttribute('aria-disabled', currentCardIndex >= cardCount - 1 ? 'true' : 'false');
      prevButton.tabIndex = currentCardIndex === 0 ? -1 : 0;
      nextButton.tabIndex = currentCardIndex >= cardCount - 1 ? -1 : 0;

      dotsContainer.querySelectorAll('button').forEach((dot, index) => {
        dot.classList.toggle('bg-white', index === currentCardIndex);
        dot.classList.toggle('bg-white/40', index !== currentCardIndex);
        dot.setAttribute('aria-current', index === currentCardIndex ? 'true' : 'false');
      });
    };

    // Inicializa los dots
    const initializeDots = () => {
      dotsContainer.innerHTML = '';
      const totalDots = cards.length - visibleCardsCount + 1;
      for (let i = 0; i < totalDots; i++) {
        const dot = document.createElement('button');
        dot.classList.add('w-3', 'h-3', 'rounded-full', 'bg-white/40', 'transition-colors', 'duration-200');
        dot.setAttribute('aria-label', `Ir al proyecto ${i + 1}`);
        dot.addEventListener('click', () => scrollToCard(i));
        dotsContainer.appendChild(dot);
      }
    };

    // Actualiza el carrusel
    const updateCarousel = () => {
      visibleCardsCount = getVisibleCardsCount();
      cardCount = cards.length - visibleCardsCount + 1;
      initializeDots();
      updateUI();
    };

    // Scroll a la tarjeta
    const scrollToCard = (index) => {
      const maxIndex = cards.length - visibleCardsCount;
      if (index < 0) index = 0;
      if (index > maxIndex) index = maxIndex;
      currentCardIndex = index;
      carousel.scrollTo({
        left: getCardWidth() * currentCardIndex,
        behavior: 'smooth',
      });
      updateUI();
    };

    // Listeners de botones
    prevButton.addEventListener('click', () => scrollToCard(currentCardIndex - 1));
    nextButton.addEventListener('click', () => scrollToCard(currentCardIndex + 1));

    // Accesibilidad con teclado
    prevButton.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') scrollToCard(currentCardIndex - 1);
    });
    nextButton.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') scrollToCard(currentCardIndex + 1);
    });

    // Hammer.js: swipe y pan
    const hammertime = new Hammer(carousel);
    hammertime.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 10 });
    hammertime.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 1 });

    hammertime.on('swipeleft', () => scrollToCard(currentCardIndex + 1));
    hammertime.on('swiperight', () => scrollToCard(currentCardIndex - 1));

    let panStartScroll = 0;
    hammertime.on('panstart', () => {
      panStartScroll = carousel.scrollLeft;
    });
    hammertime.on('panmove', (ev) => {
      carousel.scrollLeft = panStartScroll - ev.deltaX;
    });
    hammertime.on('panend', () => {
      const nearestIndex = Math.round(carousel.scrollLeft / getCardWidth());
      scrollToCard(nearestIndex);
    });

    // Mejor detección de scroll final
    carousel.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        const nearestIndex = Math.round(carousel.scrollLeft / getCardWidth());
        scrollToCard(nearestIndex);
      }, 120);
    });

    window.addEventListener('resize', () => {
      updateCarousel();
      scrollToCard(0);
    });

    updateCarousel();
    scrollToCard(0);
  });
</script>

<style>
  /* Oculta la barra de scroll */
  .projects-carousel-container {
    -ms-overflow-style: none; /* IE y Edge */
    scrollbar-width: none; /* Firefox */
    cursor: grab; /* Cambia el cursor al arrastrar */
  }
  .projects-carousel-container::-webkit-scrollbar {
    display: none; /* Chrome, Safari y Opera */
  }
</style>