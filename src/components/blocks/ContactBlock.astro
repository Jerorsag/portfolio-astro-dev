---
import type { ContactBlock } from '../../types/landing-page';

interface Props {
  block: ContactBlock;
}

const { block } = Astro.props;
---

<section id="contact" class="py-20 md:py-24 bg-slate-900 text-white">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-extrabold text-white mb-4 drop-shadow-md">
        {block.heading}
      </h2>
      <p class="text-xl text-slate-300 max-w-2xl mx-auto leading-relaxed">
        {block.description}
      </p>
    </div>

    <div class="max-w-3xl mx-auto p-6 md:p-8 bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10 shadow-xl">
      <form id="contact-form"
            data-portal-id={block.portalId}
            data-form-id={block.hubspotFormId}
            class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="firstname" class="block text-sm font-medium text-slate-300">Name</label>
            <input type="text" id="firstname" name="firstname" required
                   class="mt-1 block w-full px-4 py-2 border border-white/20 rounded-lg bg-slate-800 text-white focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent" />
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-slate-300">Email</label>
            <input type="email" id="email" name="email" required
                   class="mt-1 block w-full px-4 py-2 border border-white/20 rounded-lg bg-slate-800 text-white focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent" />
          </div>
        </div>
        <div>
          <label for="message" class="block text-sm font-medium text-slate-300">Message</label>
          <textarea id="message" name="message" rows="4" required
                    class="mt-1 block w-full px-4 py-2 border border-white/20 rounded-lg bg-slate-800 text-white focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-transparent"></textarea>
        </div>
        
        <button type="submit" id="submit-button"
                class="w-full py-3 px-4 rounded-lg font-bold text-white transition-all duration-200 ease-in-out bg-gradient-to-r from-blue-600 to-cyan-600 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 cursor-pointer">
          Send Message
        </button>
      </form>

      <div id="loading-message" class="hidden text-center text-blue-400 font-bold mt-4">
        Sending...
      </div>
      <div id="success-message" class="hidden text-center text-green-400 font-bold mt-4">
        {block.successMessage}
      </div>
      <div id="error-message" class="hidden text-center text-red-400 font-bold mt-4">
        An error occurred. Please try again.
      </div>
    </div>
  </div>
</section>

<script type="text/javascript" is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    const loadingMessage = document.getElementById('loading-message');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const submitButton = document.getElementById('submit-button');

    if (form) {
      const portalId = form.dataset.portalId;
      const formId = form.dataset.formId;

      form.addEventListener('submit', async (event) => {
        event.preventDefault();

        // Ocultar mensajes previos
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');

        // Mostrar "Sending..."
        loadingMessage.classList.remove('hidden');
        submitButton.disabled = true;

        const formData = new FormData(form);
        const data = {
          fields: [
            { name: 'firstname', value: formData.get('firstname') },
            { name: 'email', value: formData.get('email') },
            { name: 'message', value: formData.get('message') }
          ],
          context: {
            pageUri: window.location.href,
            pageName: document.title
          }
        };

        const url = `https://api.hsforms.com/submissions/v3/integration/submit/${portalId}/${formId}`;

        try {
          const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          if (response.ok) {
            // Mostrar "Sending..." por 1 segundo
            setTimeout(() => {
              loadingMessage.classList.add('hidden');
              successMessage.classList.remove('hidden');
              form.reset();

              // Mostrar Ã©xito por 3 segundos
              setTimeout(() => {
                successMessage.classList.add('hidden');
                submitButton.disabled = false;
              }, 3000);

            }, 1000);
          } else {
            console.error('Error submitting form to HubSpot:', response.statusText);
            loadingMessage.classList.add('hidden');
            errorMessage.classList.remove('hidden');
            submitButton.disabled = false;
          }
        } catch (error) {
          console.error('Network error submitting form:', error);
          loadingMessage.classList.add('hidden');
          errorMessage.classList.remove('hidden');
          submitButton.disabled = false;
        }
      });
    }
  });
</script>