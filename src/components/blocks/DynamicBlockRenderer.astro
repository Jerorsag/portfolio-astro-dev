---
import type { Block } from '../../types/landing-page';

// Importar todos los componentes de bloques
import HeroBlock from './HeroBlock.astro';
import AboutBlock from './AboutBlock.astro';
import ProjectBlock from './ProjectBlock.astro';
import ContactBlock from './ContactBlock.astro';

interface Props {
  blocks: Block[];
}

const { blocks } = Astro.props;

// Mapear componentes por tipo
const componentMap = {
  'blocks.hero': HeroBlock,
  'blocks.about': AboutBlock,
  'blocks.project': ProjectBlock,
  'blocks.contact': ContactBlock,
} as const;

// Función para obtener el componente correcto
function getBlockComponent(block: Block) {
  const componentType = block.__component as keyof typeof componentMap;
  return componentMap[componentType];
}
---

<!-- Renderizar cada bloque dinámicamente -->
{blocks.map((block, index) => {
  const BlockComponent = getBlockComponent(block);
  
  if (!BlockComponent) {
    console.warn(`Componente no encontrado para el tipo: ${block.__component}`);
    return null;
  }

  // Determinar si es el último bloque para ajustar spacing
  const isLastBlock = index === blocks.length - 1;
  
  return (
    <section 
      class={`block-section ${isLastBlock ? '' : 'mb-0'}`}
      data-block-type={block.__component}
      data-block-id={block.id}
    >
      <BlockComponent block={block} />
    </section>
  );
})}

<style>
  /* Estilos base para las secciones de bloques */
  .block-section {
    position: relative;
    width: 100%;
  }
</style>